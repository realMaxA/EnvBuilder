#Использовать fs
#Использовать json
#Использовать logos
#Использовать 1commands
#Использовать tempfiles
#Использовать gitrunner

Перем Лог;
Перем Приложение;

Перем ЭтоWindows;

Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт
	
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ИмяОкружения", "Имя окружения для развертывания. Если не указано, то разворачиваются все окружения.");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "--destination", "Каталог развертывания окружений");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "--config", "Конфигурационный файл окружений");
	
КонецПроцедуры // НастроитьКоманду

Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач лПриложение) Экспорт
	
	Приложение = лПриложение;
	
	СИ = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СИ.ВерсияОС), "windows") > 0;
	
	Лог = Приложение.ПолучитьЛог();
	Лог.УстановитьУровень(УровниЛога.Отладка);
	
	ИмяРазвертываемогоОкружения = ПараметрыКоманды["ИмяОкружения"];
	ИмяКаталогаРазвертывания    = ПараметрыКоманды["--destination"];
	ИмяФайлаНастроек            = ПараметрыКоманды["--config"];
	
	Если Не ЗначениеЗаполнено(ИмяКаталогаРазвертывания) Тогда
		ИмяКаталогаРазвертывания = ".";
	КонецЕсли;
	
	Лог.Отладка("Имя развертываемого окружения: %1", ИмяРазвертываемогоОкружения);
	Лог.Отладка("Конфигурационный файл: %1", ИмяФайлаНастроек);
	Лог.Отладка("Каталог развертывания: %1", ИмяКаталогаРазвертывания);
	
	Если Не ФС.КаталогСуществует(ИмяКаталогаРазвертывания) Тогда
		Приложение.ЗавершитьРаботуПриложенияСОшибкой("Каталог развертывания окружений не существует");
	КонецЕсли;
	
	ФайлКаталогаРазвертывания = Новый Файл(ИмяКаталогаРазвертывания);
	КаталогРазвертывания = ФайлКаталогаРазвертывания.ПолноеИмя;
	ВременныйКаталогРазвертывания = ВременныеФайлы.СоздатьКаталог();
	
	Если ФС.Существует(ИмяФайлаНастроек) Тогда
		Если ФС.КаталогСуществует(ИмяФайлаНастроек) Тогда
			Приложение.ЗавершитьРаботуПриложенияСОшибкой("Не найден конфигурационный файл", 1);
		КонецЕсли;
	Иначе
		Приложение.ЗавершитьРаботуПриложенияСОшибкой("Не найден конфигурационный файл", 1);
	КонецЕсли;
	
	ЧтениеСодержимогоКонфига = Новый ЧтениеТекста(ИмяФайлаНастроек, КодировкаТекста.UTF8);
	СодержимоеКонфига = ЧтениеСодержимогоКонфига.Прочитать();
	ЧтениеСодержимогоКонфига.Закрыть();
	
	Парсер = Новый ПарсерJSON();
	
	Конфиг = Парсер.ПрочитатьJSON(СодержимоеКонфига);
	
	СписокОкружений = Конфиг["environments"];
	
	ОкруженияДляРазвертывания = Новый Соответствие;
	Если ПустаяСтрока(ИмяРазвертываемогоОкружения) Тогда
		Для каждого ДанныеОкружения Из СписокОкружений Цикл
			ОкруженияДляРазвертывания.Вставить(ДанныеОкружения.Ключ, ДанныеОкружения.Значение);
		КонецЦикла;
	Иначе
		Окружение = СписокОкружений[ИмяРазвертываемогоОкружения];
		Если Окружение = Неопределено Тогда
			Приложение.ЗавершитьРаботуПриложенияСОшибкой("Не найдены настройки разворачиваемого окружения");
		КонецЕсли;
		
		ОкруженияДляРазвертывания.Вставить(ИмяРазвертываемогоОкружения, Окружение);
	КонецЕсли;
	
	Для каждого Окружение Из ОкруженияДляРазвертывания Цикл
		РазвернутьОкружение(Окружение, ВременныйКаталогРазвертывания);
		
		ВременныйКаталогОкружения = ОбъединитьПути(ВременныйКаталогРазвертывания, Окружение.Ключ) ;
		КаталогОкружения = ОбъединитьПути(КаталогРазвертывания, Окружение.Ключ) ;
		
		СнятьПризнакТолькоЧтение(КаталогОкружения);
		
		ФС.ОбеспечитьПустойКаталог(КаталогОкружения);
		ФС.КопироватьСодержимоеКаталога(ВременныйКаталогОкружения, КаталогОкружения);
	КонецЦикла;
	
	СнятьПризнакТолькоЧтение(ВременныйКаталогОкружения);
	
	ВременныеФайлы.Удалить();
	
	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
КонецФункции // ВыполнитьКоманду

Процедура РазвернутьОкружение(Знач Окружение, Знач КаталогРазвертывания)
	Настройки = Новый Соответствие;
	
	ИмяОкружения      = Окружение.Ключ;
	НастрокаОкружения = Окружение.Значение;
	
	НастройкаОскрипт            = НастрокаОкружения.Получить("oscript");
	НастройкаПрочихИнструментов = НастрокаОкружения.Получить("others");
	
	КаталогРазвертывания = ОбъединитьПути(КаталогРазвертывания, ИмяОкружения);
	ФС.ОбеспечитьПустойКаталог(КаталогРазвертывания);
	
	Если ЗначениеЗаполнено(НастройкаОскрипт) Тогда
		НастройкиРазвернутогоОскрипта = РазвернутьОскрипт(НастройкаОскрипт, КаталогРазвертывания);
		ДополнитьНастройки(Настройки, НастройкиРазвернутогоОскрипта);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаПрочихИнструментов) Тогда
		Для каждого НастройкаСтороннегоИнструмента Из НастройкаПрочихИнструментов Цикл
			ИмяИнструмента       = НастройкаСтороннегоИнструмента.Ключ;
			НастройкиИнструмента = НастройкаСтороннегоИнструмента.Значение;
			
			НастройкиИнструмента = РазвернутьСтороннийИнструмент(ИмяИнструмента, НастройкиИнструмента, КаталогРазвертывания);
			ДополнитьНастройки(Настройки, НастройкиИнструмента);
		КонецЦикла;
	КонецЕсли;
	
	СоздатьФайлНастроекОкружения(Настройки, КаталогРазвертывания);
КонецПроцедуры

Функция РазвернутьОскрипт(Знач Настройка, Знач КаталогРазвертывания)
	ВерсияОскрипт = Настройка["version"];
	Если ЗначениеЗаполнено(ВерсияОскрипт) Тогда
		ВерсияОскрипт = СтрЗаменить(ВерсияОскрипт, ".", "_");
	Иначе
		ВерсияОскрипт = "latest";
	КонецЕсли;
	
	АдресРесурса = СтрШаблон("http://oscript.io/downloads/%1/zip", ВерсияОскрипт);
	
	ИмяВременногоКаталога = ВременныеФайлы.СоздатьКаталог();
	ФС.ОбеспечитьПустойКаталог(ИмяВременногоКаталога);
	
	ИмяАрхива = ОбъединитьПути(ИмяВременногоКаталога, "oscript.zip");
	
	Команда = Новый Команда;
	
	Команда.УстановитьКоманду("wget");
	Команда.ДобавитьПараметр("-O " + ИмяАрхива);	
	Команда.ДобавитьПараметр(АдресРесурса);	
	Команда.ПоказыватьВыводНемедленно(Истина);
	
	КодВозврата = Команда.Исполнить();
	
	Если КодВозврата <> 0 Тогда
		Сообщить(Команда.ПолучитьВывод());
		Приложение.ЗавершитьРаботуПриложенияСОшибкой("Не удалось получить oscript");
	КонецЕсли;
	
	КаталогOScript = ОбъединитьПути(КаталогРазвертывания, "tools", "oscript");
	ФС.ОбеспечитьПустойКаталог(КаталогOScript);
	
	Архив = Новый ЧтениеZipФайла(ИмяАрхива);
	Архив.ИзвлечьВсе(КаталогOScript);
	Архив.Закрыть();
	
	ОбновитьOPM(КаталогOScript);
	
	УстановитьПриложениеOScript(КаталогOScript, "-all");
	
	БиблиотекиДляУстановки = Настройка["libs"];
	Если ЗначениеЗаполнено(БиблиотекиДляУстановки) Тогда
		Для каждого БиблиотекаДляУстановки Из БиблиотекиДляУстановки Цикл
			УстановитьПриложениеOScript(КаталогOScript, БиблиотекаДляУстановки);
		КонецЦикла;
	КонецЕсли;
	
	ПриложенияДляУстановки = Настройка["apps"];
	Если ЗначениеЗаполнено(ПриложенияДляУстановки) Тогда
		Для каждого ПриложениеДляУстановки Из ПриложенияДляУстановки Цикл
			УстановитьПриложениеOScript(КаталогOScript, ПриложениеДляУстановки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоздатьСтартерыПриложений(КаталогOScript);
КонецФункции

Процедура ОбновитьOPM(Знач КаталогOScript)
	Команда = Новый Команда;
	
	ТочкиВходаOPM = ОпределитьТочкиВхода(КаталогOScript, "opm");
	
	ТочкаВходаOPM = Неопределено;
	Для каждого ТочкаВходаOPM Из ТочкиВходаOPM Цикл
		Прервать;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТочкаВходаOPM) Тогда
		Приложение.ЗавершитьРаботуПриложенияСОшибкой("Не удалось определить точки входа приложения opm");
	КонецЕсли;
	
	Если ЭтоWindows Тогда
		Команда.УстановитьКоманду(ОбъединитьПути(КаталогOScript, "bin", "oscript.exe"));
	Иначе
		Команда.УстановитьКоманду("mono");
		Команда.ДобавитьПараметр(ОбъединитьПути(КаталогOScript, "bin", "oscript.exe"));	
	КонецЕсли;
	Команда.ДобавитьПараметр(ОбъединитьПути(КаталогOScript, "lib", ТочкаВходаOPM.Значение));	
	Команда.ДобавитьПараметр("update");	
	Команда.ДобавитьПараметр("opm");	
	Команда.ПоказыватьВыводНемедленно(Истина);
	
	КодВозврата = Команда.Исполнить();
	
	Если КодВозврата <> 0 Тогда
		Сообщить(Команда.ПолучитьВывод());
		Приложение.ЗавершитьРаботуПриложенияСОшибкой("Не удалось обновить opm");
	КонецЕсли;
	
	СоздатьСтартерПриложения(КаталогOScript, "opm");
КонецПроцедуры

Процедура УстановитьПриложениеOScript(Знач КаталогOScript, Знач ИмяПриложения)
	Команда = Новый Команда;
	
	Если ЭтоWindows Тогда
		Команда.УстановитьКоманду(ОбъединитьПути(КаталогOScript, "bin", "opm.bat"));
	Иначе
		Команда.УстановитьКоманду("sh");
		Команда.ДобавитьПараметр(ОбъединитьПути(КаталогOScript, "bin", "opm.sh"));
	КонецЕсли;
	Команда.ДобавитьПараметр("update");
	Команда.ДобавитьПараметр(ИмяПриложения);
	Команда.ПоказыватьВыводНемедленно(Истина);
	
	КодВозврата = Команда.Исполнить();
	
	Сообщить(Команда.ПолучитьВывод());
КонецПроцедуры

Функция СоздатьСтартерыПриложений(Знач КаталогOScript)
	НастройкиСтартеров = Новый Соответствие;
	
	СписокБиблиотек = НайтиФайлы(ОбъединитьПути(КаталогOScript, КаталогБиблиотек()), "*");
	Для каждого Библиотека Из СписокБиблиотек Цикл
		Если Библиотека.ЭтоКаталог() Тогда
			Лог.Отладка("Попытка создания стартеров для ""%1""", Библиотека.Имя);
			
			СозданныеСтартеры = СоздатьСтартерПриложения(КаталогOScript, Библиотека.Имя);
			Если СозданныеСтартеры.Количество() > 0 Тогда
				ДополнитьНастройки(НастройкиСтартеров, СозданныеСтартеры);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиСтартеров;
КонецФункции

Функция СоздатьСтартерПриложения(Знач КаталогOScript, Знач ИмяПриложения)
	СозданныеСтартеры = Новый Соответствие;
	
	СписокТочекВхода = ОпределитьТочкиВхода(КаталогOScript, ИмяПриложения);
	
	КаталогРазмещенияСтартера = ОбъединитьПути(КаталогOScript, "bin");
	
	Лог.Отладка("%1 точек входа", Строка(СписокТочекВхода.Количество()));
	
	Для каждого ТочкаВхода Из СписокТочекВхода Цикл
		ИмяПриложения = ТочкаВхода.Ключ;
		
		Лог.Отладка("Создаются стартеры для приложения %1 с точкой входа %2", ИмяПриложения, ТочкаВхода.Значение);
		
		// Windows
		ИмяФайлаСтартераWin = СтрШаблон("%1.bat", ИмяПриложения);
		ПутьФайлаСтартераWin = ОбъединитьПути(КаталогРазмещенияСтартера, ИмяФайлаСтартераWin);
		
		ФайлСтартер = Новый ЗаписьТекста(ПутьФайлаСтартераWin, КодировкаТекста.OEM);
		ФайлСтартер.ЗаписатьСтроку("@echo off");
		ФайлСтартер.ЗаписатьСтроку("");
		ФайлСтартер.ЗаписатьСтроку("setlocal");
		ФайлСтартер.ЗаписатьСтроку("");
		ФайлСтартер.ЗаписатьСтроку(СтрШаблон("set executable=%1", ТочкаВхода.Значение));
		ФайлСтартер.ЗаписатьСтроку("set libpath=../lib");
		ФайлСтартер.ЗаписатьСтроку("");
		ФайлСтартер.ЗаписатьСтроку("set bin=%~dp0");
		ФайлСтартер.ЗаписатьСтроку("set lib=%bin%/%libpath%");
		ФайлСтартер.ЗаписатьСтроку("set entrypoint=%lib%/%executable%");
		ФайлСтартер.ЗаписатьСтроку("");
		ФайлСтартер.ЗаписатьСтроку("""%bin%/oscript.exe"" ""%entrypoint%"" %*");
		ФайлСтартер.ЗаписатьСтроку("");
		ФайлСтартер.ЗаписатьСтроку("exit /b %ERRORLEVEL%");
		ФайлСтартер.Закрыть();
		
		// Unix
		ИмяФайлаСтартераLinux = СтрШаблон("%1.sh", ИмяПриложения);
		ПутьФайлаСтартераLinux = ОбъединитьПути(КаталогРазмещенияСтартера, ИмяФайлаСтартераLinux);
		
		ФайлСтартер = Новый ЗаписьТекста(ПутьФайлаСтартераLinux, КодировкаТекста.OEM);
		ФайлСтартер.ЗаписатьСтроку("#!/bin/bash");
		ФайлСтартер.ЗаписатьСтроку("");
		ФайлСтартер.ЗаписатьСтроку(СтрШаблон("EXECUTABLE=""%1""", ТочкаВхода.Значение));
		ФайлСтартер.ЗаписатьСтроку("LIBPATH=""../lib""");
		ФайлСтартер.ЗаписатьСтроку("");
		ФайлСтартер.ЗаписатьСтроку("BIN=`dirname $(realpath $0)`");
		ФайлСтартер.ЗаписатьСтроку("LIB=""$BIN/$LIBPATH""");
		ФайлСтартер.ЗаписатьСтроку("ENTRYPOINT=""$LIB/$EXECUTABLE""");
		ФайлСтартер.ЗаписатьСтроку("");
		ФайлСтартер.ЗаписатьСтроку("mono ""$BIN/oscript.exe"" ""$ENTRYPOINT"" ""$@""");
		ФайлСтартер.Закрыть();
		
		ПараметрыСтартера = Новый Структура;
		ПараметрыСтартера.Вставить("win", ПутьФайлаСтартераWin);
		ПараметрыСтартера.Вставить("linux", ПутьФайлаСтартераLinux);
		
		НастройкиПриложения = Новый Структура("exec", ПараметрыСтартера);
		
		СозданныеСтартеры.Вставить(ИмяПриложения, НастройкиПриложения);
	КонецЦикла;
	
	Возврат СозданныеСтартеры;
КонецФункции

Функция ОпределитьТочкиВхода(Знач КаталогOScript, Знач Приложение)
	СписокТочекВхода = Новый Соответствие;
	
	КаталогБиблиотеки = ОбъединитьПути(КаталогOScript, КаталогБиблиотек(), Приложение);
	ПутьКМетаданнымБиблиотеки = ОбъединитьПути(КаталогБиблиотеки, "opm-metadata.xml");
	
	Если ФС.ФайлСуществует(ПутьКМетаданнымБиблиотеки) Тогда
		МетаданныеБиблиотеки = Новый ЧтениеXML();
		МетаданныеБиблиотеки.ОткрытьФайл(ПутьКМетаданнымБиблиотеки);
		
		ЧитаемСвойства = Ложь;
		ЧитаемТочкуВхода = Ложь;
		Пока МетаданныеБиблиотеки.Прочитать() Цикл
			Если Не ЧитаемСвойства И МетаданныеБиблиотеки.ТипУзла = ТипУзлаXML.НачалоЭлемента И МетаданныеБиблиотеки.Имя = "opm-metadata" Тогда
				ЧитаемСвойства = Истина;
				Продолжить;
			КонецЕсли;
			
			Если ЧитаемСвойства Тогда
				Если МетаданныеБиблиотеки.ТипУзла = ТипУзлаXML.НачалоЭлемента И МетаданныеБиблиотеки.Имя = "executable" Тогда
					ИмяПриложения = Неопределено;
					Если МетаданныеБиблиотеки.КоличествоАтрибутов() = 0 Тогда
						ИмяПриложения = Приложение;
					Иначе
						Для Счетчик = 1 По МетаданныеБиблиотеки.КоличествоАтрибутов() Цикл
							МетаданныеБиблиотеки.ПрочитатьАтрибут();
							Если МетаданныеБиблиотеки.ЛокальноеИмя = "name" Тогда
								ИмяПриложения = МетаданныеБиблиотеки.Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ИмяПриложения = Неопределено Тогда
						Лог.Отладка("Не удалось определить имя скрипта запуска для приложения %1", Приложение);
						Продолжить;
					КонецЕсли;
					
					ЧитаемТочкуВхода = Истина;
				ИначеЕсли МетаданныеБиблиотеки.ТипУзла = ТипУзлаXML.КонецЭлемента И МетаданныеБиблиотеки.Имя = "executable" Тогда
					ЧитаемТочкуВхода = Ложь;
				Иначе
					Если ЧитаемТочкуВхода Тогда
						Если МетаданныеБиблиотеки.ТипУзла = ТипУзлаXML.Текст Тогда
							ТочкаВхода = МетаданныеБиблиотеки.Значение;
							
							Лог.Отладка("Точка входа приложения %1: %2", ИмяПриложения, ТочкаВхода);
							
							СписокТочекВхода.Вставить(ИмяПриложения, Приложение + "/" + ТочкаВхода);
						КонецЕсли;
					Иначе
						МетаданныеБиблиотеки.Пропустить();
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		МетаданныеБиблиотеки.Закрыть();
	ИначеЕсли Приложение = "opm" Тогда
		Лог.Отладка("Точка входа приложения %1: %2", "opm", Приложение + "/src/opm.os");
		СписокТочекВхода.Вставить("opm", "opm/src/opm.os");
	КонецЕсли;
	
	Возврат СписокТочекВхода;
КонецФункции


Функция РазвернутьСтороннийИнструмент(Знач ИмяИнструмента, Знач Настройка, Знач КаталогРазвертывания)
	НастройкиИнструмента = Новый Соответствие;
	
	КаталогИнструмента = ОбъединитьПути(КаталогРазвертывания, "tools", ИмяИнструмента);
	ФС.ОбеспечитьПустойКаталог(КаталогИнструмента);
	
	ТипИнструмента = Настройка["type"];
	
	Если ТипИнструмента = "git" Тогда
		Репозиторий = Настройка["repo"];
		Ветка       = Настройка["branch"];
		
		Лог.Отладка("Репозиторий git: %1, ветка: ""%2""", Репозиторий, Ветка);
		
		ГитРепозиторий = Новый ГитРепозиторий();
		ГитРепозиторий.УстановитьРабочийКаталог(КаталогИнструмента);
		ГитРепозиторий.КлонироватьРепозиторий(Репозиторий, КаталогИнструмента);
		ГитРепозиторий.ПерейтиВВетку(Ветка);
		ГитРепозиторий = Неопределено;
		ВыполнитьСборкуМусора();
		
		НастройкиИнструмента.Вставить(ИмяИнструмента, Новый Структура("path", КаталогИнструмента));
	КонецЕсли;
	
	Возврат НастройкиИнструмента;
КонецФункции


Процедура ДополнитьНастройки(Знач Настройки, Знач Приложения)
	Для каждого НастройкиПриложения Из Приложения Цикл
		Настройки.Вставить(НастройкиПриложения.Ключ, НастройкиПриложения.Значение);
	КонецЦикла;
КонецПроцедуры

Процедура СнятьПризнакТолькоЧтение(Знач Каталог)
	Если ЭтоWindows Тогда
		Лог.Отладка("Снимаем признак только чтение с каталога ""%1""", Каталог);
		
		Команда = Новый Команда;
		
		Команда.УстановитьКоманду("attrib");
		Команда.ДобавитьПараметр("/S");	
		Команда.ДобавитьПараметр("/D");	
		Команда.ДобавитьПараметр("-R -H -A -S " + ОбъединитьПути(Каталог, "*.*"));	
		Команда.ПоказыватьВыводНемедленно(Истина);
		
		КодВозврата = Команда.Исполнить();
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьФайлНастроекОкружения(Знач СписокПриложений, Знач КаталогРазвертывания);
	Для каждого СозданноеПриложение Из СписокПриложений Цикл
		НастройкиПриложения = СозданноеПриложение.Значение;
		
		ПутиКСтартерам = Неопределено;
		Если НастройкиПриложения.Свойство("exec", ПутиКСтартерам) И ЗначениеЗаполнено(ПутиКСтартерам) Тогда
			Для каждого СтартерыПриложения Из ПутиКСтартерам Цикл
				НовыйПуть = ФС.ОтносительныйПуть(КаталогРазвертывания, СтартерыПриложения.Значение, "/");
				НастройкиПриложения["exec"].Вставить(СтартерыПриложения.Ключ, НовыйПуть);
			КонецЦикла;
		КонецЕсли;
		
		ПутьКПриложению = Неопределено;
		Если НастройкиПриложения.Свойство("path", ПутьКПриложению) И ЗначениеЗаполнено(ПутьКПриложению) Тогда
			НовыйПуть = ФС.ОтносительныйПуть(КаталогРазвертывания, ПутьКПриложению, "/");
			СозданноеПриложение.Значение["path"] = НовыйПуть;
		КонецЕсли;
	КонецЦикла;
	
	Парсер = Новый ПарсерJSON();
	
	Запись = Новый ЗаписьТекста(ОбъединитьПути(КаталогРазвертывания, "env.json"), КодировкаТекста.UTF8);
	Запись.Записать(Парсер.ЗаписатьJSON(СписокПриложений));
	Запись.Закрыть();
КонецПроцедуры


Функция КаталогБиблиотек()
	Возврат "lib";
КонецФункции // КаталогБиблиотек()
